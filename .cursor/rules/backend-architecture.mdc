---
description: 
globs: 
alwaysApply: true
---
# Go后端项目架构设计文档（小型项目适用版）

## 1. 引言

### 1.1. 目的

本文档旨在提供一个适合小型Go后端项目的架构设计，确保代码组织清晰、可维护性高，并为未来可能的扩展提供良好基础。

### 1.2. 范围

本文档涵盖后端系统的整体架构、模块划分、技术选型、目录结构和渐进式实现策略。

## 2. 架构概述

### 2.1. 架构风格

采用模块化单体架构，结合分层架构和领域驱动设计(DDD)的精简版本，适用于小型到中型规模的Go后端项目。

### 2.2. 目标

- 构建易于理解和维护的后端系统
- 降低开发复杂度，提高开发效率
- 确保代码组织的一致性和可预测性
- 为未来可能的扩展或重构奠定基础

## 3. 核心设计原则

- **模块化**：按业务领域划分模块，降低模块间耦合
- **职责分离**：分层架构明确各层职责，提高代码可读性
- **依赖倒置**：高层模块不依赖低层模块实现细节，依赖抽象接口
- **单一职责**：每个组件只负责单一功能
- **约定优于配置**：遵循一致的项目结构和命名约定

## 4. 系统架构

### 4.1. 整体架构

采用模块化单体，将应用按业务功能垂直划分为多个模块，模块间通过接口交互。

### 4.2. 模块内部分层

每个模块内部采用经典分层架构：

- **API/Handler层**：处理HTTP请求和响应
- **Service层**：实现业务逻辑，协调各组件
- **Repository层**：负责数据访问，屏蔽存储实现细节
- **Domain层**：包含领域模型和业务规则

## 5. 技术选型

### 5.1. 核心技术栈

- **编程语言**：Go
- **Web框架**：Gin
  ```go
  // 设置路由示例
  r := gin.Default()
  r.Use(middleware.Auth())
  
  v1 := r.Group("/api/v1")
  {
      users := v1.Group("/users")
      {
          users.GET("/:id", userHandler.GetUser)
          users.POST("/", userHandler.CreateUser)
      }
  }
  ```

- **ORM**：GORM
  ```go
  // 仓储层示例
  func (r *UserRepository) FindByID(id string) (*domain.User, error) {
      var user models.User
      if err := r.db.First(&user, "id = ?", id).Error; err != nil {
          return nil, err
      }
      return models.ToDomain(&user), nil
  }
  ```

- **依赖注入**：Wire (简化初始化)
  ```go
  // wire.go
  func InitializeAPI() (*Server, error) {
      wire.Build(
          config.NewConfig,
          database.NewConnection,
          repository.NewUserRepository,
          service.NewUserService,
          handler.NewUserHandler,
          NewServer,
      )
      return &Server{}, nil
  }
  ```

- **API文档**：Swagger/OpenAPI
  ```go
  // @Summary 获取用户信息
  // @Description 根据ID获取用户详情
  // @Tags users
  // @Accept json
  // @Produce json
  // @Param id path string true "用户ID"
  // @Success 200 {object} responses.UserResponse
  // @Router /api/v1/users/{id} [get]
  func (h *UserHandler) GetUser(c *gin.Context) {
      // 实现...
  }
  ```

### 5.2. 辅助技术

- **日志**：Zap (结构化日志)
- **配置管理**：Viper
- **测试**：标准testing包 + Testify
- **数据库**：PostgreSQL/MySQL
- **缓存**：Redis (可选)

## 6. 推荐目录结构

```
project-name/
├── cmd/                # 应用入口点
│   └── api/            # API服务入口
│       └── main.go     # 主程序
├── internal/           # 私有应用代码
│   ├── config/         # 配置管理
│   │   └── config.go   # 配置加载
│   ├── middleware/     # HTTP中间件
│   │   ├── auth.go     # 认证中间件
│   │   └── logger.go   # 日志中间件
│   ├── domain/         # 领域模型(跨模块共享)
│   │   └── user.go     # 用户领域模型
│   ├── module1/        # 业务模块1 (例如用户模块)
│   │   ├── handler/    # HTTP处理器
│   │   │   └── handler.go
│   │   ├── service/    # 业务逻辑
│   │   │   └── service.go
│   │   └── repository/ # 数据访问
│   │       └── repository.go
│   ├── module2/        # 业务模块2
│   │   ├── handler/
│   │   ├── service/
│   │   └── repository/
│   ├── database/       # 数据库连接
│   │   ├── db.go       # 连接初始化
│   │   └── migrations/ # 迁移脚本
│   └── models/         # 数据库模型
│       └── user.go     # 用户表模型
├── pkg/                # 可导出的库代码
│   └── utils/          # 通用工具
├── api/                # API定义和文档
│   └── swagger/        # Swagger文件
├── configs/            # 配置文件
│   ├── app.yaml        # 应用配置
│   └── .env.example    # 环境变量示例
├── scripts/            # 工具脚本
│   └── migrations.sh   # 数据库迁移脚本
├── tests/              # 测试代码
│   ├── unit/           # 单元测试
│   └── integration/    # 集成测试
├── .gitignore
├── go.mod
├── go.sum
├── README.md
├── Makefile            # 常用命令
└── wire.go             # 依赖注入
```

## 7. 渐进式实现策略

对于小型项目，可以按照以下顺序逐步实现架构：

### 7.1. 第一阶段：基础框架搭建

1. **建立项目骨架**：
   - 创建基本目录结构
   - 设置Go模块和依赖
   - 配置基本Makefile

2. **配置和连接**：
   - 实现配置加载 (`internal/config`)
   - 设置数据库连接 (`internal/database`)
   - 创建基本中间件 (`internal/middleware`)

3. **实现核心服务入口**：
   - 配置Gin路由 (`cmd/api/main.go`)
   - 设置基本中间件链
   - 实现健康检查接口

```go
// cmd/api/main.go
package main

import (
    "log"
    "github.com/gin-gonic/gin"
    "github.com/yourproject/internal/config"
    "github.com/yourproject/internal/middleware"
)

func main() {
    // 加载配置
    cfg, err := config.Load()
    if err != nil {
        log.Fatalf("Failed to load config: %v", err)
    }
    
    // 设置Gin模式
    if cfg.Environment == "production" {
        gin.SetMode(gin.ReleaseMode)
    }
    
    // 创建路由
    r := gin.Default()
    
    // 添加中间件
    r.Use(middleware.Logger())
    r.Use(middleware.CORS())
    
    // 健康检查
    r.GET("/health", func(c *gin.Context) {
        c.JSON(200, gin.H{"status": "ok"})
    })
    
    // 启动服务器
    log.Printf("Starting server on %s", cfg.ServerAddress)
    if err := r.Run(cfg.ServerAddress); err != nil {
        log.Fatalf("Server error: %v", err)
    }
}
```

### 7.2. 第二阶段：添加第一个完整模块

以用户模块为例：

1. **创建模块目录结构**：
   ```
   internal/user/
   ├── handler/
   │   └── handler.go
   ├── service/
   │   └── service.go
   └── repository/
       └── repository.go
   ```

2. **实现领域模型**：
   ```go
   // internal/domain/user.go
   package domain

   import "time"

   type User struct {
       ID        string
       Email     string
       Name      string
       CreatedAt time.Time
       UpdatedAt time.Time
   }
   ```

3. **实现数据库模型**：
   ```go
   // internal/models/user.go
   package models

   import (
       "time"
       "github.com/yourproject/internal/domain"
   )

   type User struct {
       ID        string    `gorm:"primaryKey"`
       Email     string    `gorm:"uniqueIndex"`
       Name      string
       CreatedAt time.Time
       UpdatedAt time.Time
   }

   // 转换为领域模型
   func (u *User) ToDomain() *domain.User {
       return &domain.User{
           ID:        u.ID,
           Email:     u.Email,
           Name:      u.Name,
           CreatedAt: u.CreatedAt,
           UpdatedAt: u.UpdatedAt,
       }
   }

   // 从领域模型创建
   func FromDomain(user *domain.User) *User {
       return &User{
           ID:        user.ID,
           Email:     user.Email,
           Name:      user.Name,
           CreatedAt: user.CreatedAt,
           UpdatedAt: user.UpdatedAt,
       }
   }
   ```

4. **实现仓储层**：
   ```go
   // internal/user/repository/repository.go
   package repository

   import (
       "gorm.io/gorm"
       "github.com/yourproject/internal/domain"
       "github.com/yourproject/internal/models"
   )

   type UserRepository struct {
       db *gorm.DB
   }

   func NewUserRepository(db *gorm.DB) *UserRepository {
       return &UserRepository{db: db}
   }

   func (r *UserRepository) FindByID(id string) (*domain.User, error) {
       var user models.User
       if err := r.db.First(&user, "id = ?", id).Error; err != nil {
           return nil, err
       }
       return user.ToDomain(), nil
   }

   func (r *UserRepository) Save(user *domain.User) error {
       userModel := models.FromDomain(user)
       return r.db.Create(userModel).Error
   }
   ```

5. **实现服务层**：
   ```go
   // internal/user/service/service.go
   package service

   import (
       "github.com/yourproject/internal/domain"
       "github.com/yourproject/internal/user/repository"
   )

   type UserService struct {
       repo *repository.UserRepository
   }

   func NewUserService(repo *repository.UserRepository) *UserService {
       return &UserService{repo: repo}
   }

   func (s *UserService) GetUser(id string) (*domain.User, error) {
       return s.repo.FindByID(id)
   }

   func (s *UserService) CreateUser(email, name string) (*domain.User, error) {
       // 实现创建用户逻辑
       // ...
   }
   ```

6. **实现处理器层**：
   ```go
   // internal/user/handler/handler.go
   package handler

   import (
       "net/http"
       "github.com/gin-gonic/gin"
       "github.com/yourproject/internal/user/service"
   )

   type UserHandler struct {
       userService *service.UserService
   }

   func NewUserHandler(userService *service.UserService) *UserHandler {
       return &UserHandler{userService: userService}
   }

   // @Summary 获取用户
   // @Description 根据ID获取用户
   // @Tags users
   // @Accept json
   // @Produce json
   // @Param id path string true "用户ID"
   // @Success 200 {object} domain.User
   // @Router /api/v1/users/{id} [get]
   func (h *UserHandler) GetUser(c *gin.Context) {
       id := c.Param("id")
       
       user, err := h.userService.GetUser(id)
       if err != nil {
           c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
           return
       }
       
       c.JSON(http.StatusOK, user)
   }

   func (h *UserHandler) CreateUser(c *gin.Context) {
       // 实现创建用户处理逻辑
       // ...
   }

   // 注册路由
   func RegisterRoutes(r *gin.RouterGroup, h *UserHandler) {
       users := r.Group("/users")
       {
           users.GET("/:id", h.GetUser)
           users.POST("/", h.CreateUser)
       }
   }
   ```

7. **注册路由**：
   ```go
   // 在main.go中
   userRepo := repository.NewUserRepository(db)
   userService := service.NewUserService(userRepo)
   userHandler := handler.NewUserHandler(userService)

   api := r.Group("/api/v1")
   handler.RegisterRoutes(api, userHandler)
   ```

### 7.3. 第三阶段：添加更多功能和模块

1. 按照相同的模式添加更多业务模块
2. 根据需要引入更多基础设施组件
3. 添加API文档和适当的测试
4. 优化项目配置和构建过程

## 8. 最佳实践

### 8.1. 代码组织

- 保持模块边界清晰，避免模块间直接依赖
- 使用接口进行依赖注入，便于测试和替换实现
- 领域模型应该独立于框架和基础设施
- 数据库模型与领域模型分开，使用转换函数

### 8.2. 错误处理

```go
// 定义应用错误类型
type AppError struct {
    Code    string
    Message string
}

func (e AppError) Error() string {
    return e.Message
}

// 使用示例
if user == nil {
    return nil, AppError{
        Code:    "USER_NOT_FOUND",
        Message: "User not found",
    }
}

// 在处理器中处理错误
if err != nil {
    var appErr AppError
    if errors.As(err, &appErr) {
        c.JSON(http.StatusBadRequest, gin.H{
            "code":    appErr.Code,
            "message": appErr.Message,
        })
        return
    }
    c.JSON(http.StatusInternalServerError, gin.H{
        "message": "Internal server error",
    })
    return
}
```

### 8.3. 配置管理

```go
// internal/config/config.go
package config

import "github.com/spf13/viper"

type Config struct {
    Environment   string
    ServerAddress string
    Database      DatabaseConfig
}

type DatabaseConfig struct {
    Host     string
    Port     int
    Username string
    Password string
    DBName   string
}

func Load() (*Config, error) {
    viper.SetConfigName("app")
    viper.SetConfigType("yaml")
    viper.AddConfigPath("./configs")
    viper.AutomaticEnv()
    
    if err := viper.ReadInConfig(); err != nil {
        return nil, err
    }
    
    var cfg Config
    if err := viper.Unmarshal(&cfg); err != nil {
        return nil, err
    }
    
    return &cfg, nil
}
```

## 9. 总结

本架构设计适合小型Go后端项目，遵循了模块化单体和领域驱动设计的核心理念，同时保持了足够的简洁性和灵活性。通过渐进式实现策略，可以根据项目实际需求逐步构建系统，避免过度设计。

核心优势：
- 清晰的目录结构和组织方式
- 足够灵活以适应不同规模的项目
- 关注点分离，每个组件职责明确
- 可随项目增长逐步扩展
- 平衡了开发效率和架构质量

随着项目的发展，可以根据需要扩展或调整架构，但本文档提供的基础结构和原则将确保代码库保持可维护和可扩展。